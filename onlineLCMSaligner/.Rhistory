)
###we compute the cliques
# sink(file="/dev/null")
# sink("D:/out.txt")
suppressWarnings(sink(NULL))
anclique <- computeCliques(anclique, 1e-5, TRUE)
suppressWarnings(sink(NULL))
###We correct the index for subselection.
for (ic in seq_along(anclique@cliques)) {
anclique@cliques[[ic]] <- sel_idx[anclique@cliques[[ic]]]
}
cliques <-
mergeCliques(cliques, anclique@cliques, assignments, size, current_id)
}
summarized_df <- data.frame(
mz = dm[, "mz"],
mzmin = dm[, "mz"] - (dm[, "mz_max"] - dm[, "mz_min"]) * 1.5 ,
mzmax = dm[, "mz"] + (dm[, "mz_max"] - dm[, "mz_min"]) * 1.5,
rt = 60 * (dm[, "rt"]),
rtmin = 60 * (dm[, "rt"] - dm[, "peakwidth_mean"] - 0.002),
rtmax = 60 * (dm[, "rt"] + dm[, "peakwidth_mean"] + 0.002),
into = val_int,
intb = val_int,
maxo = val_int,
sn = rep(10, nrow(dm)),
sample =
rep(1, nrow(dm)),
is_filled = rep(0, nrow(dm))
)
###We just have to construct the definitive peaktable.
###We can redirect all the cliques in the data
empty_graph <- function() {
temp <- matrix(rnorm(4), nrow = 2)
ga <- graph_from_adjacency_matrix(adjmatrix = temp,
mode = "undirected",
weighted = TRUE)
return(ga)
}
anclique@network <- empty_graph()
pint <- getIntensityPos(dm)[1]
###We add the missing feature to the data
num_features <- 1:nrow(dm)
found_features <- unlist(cliques)
missing_features <- setdiff(num_features,found_features)
if(length(missing_features)>0){
cliques <- c(cliques,as.list(missing_features))
}
message("Annotating")
res_df <- annotateCliques(cliques,
summarized_df,
adducts,
main_adducts,
ionization_mode,
val_int,
bpp = bpp)
####We add the annotation for all the peaks
message("Converting features.")
annot <- convertFeatures(res_df, polarity = ionization_mode)
return(annot)
}
lints <- list()
ldetect <- list()
BY_LINE <- 50000
sdata <- fread(PATH_DATAMATRIX, header = TRUE, sep = "\t",skip=0,nrows = BY_LINE)
cnames <- colnames(sdata)
posIntensities <- getIntensityPos(sdata)
val_int <- rep(0,length(posIntensities))
counter <- 1
while(TRUE){
sdata <- tryCatch(fread(PATH_DATAMATRIX, header = FALSE, sep = "\t",skip=BY_LINE*(counter-1)+1,nrows = BY_LINE),
error=function(e) return(NA))
if(length(sdata)==1) break
colnames(sdata) <- cnames
ldetect[[counter]] <- sdata[["num_detection"]]
int <- apply(sdata[,..posIntensities],1,mean,na.rm=TRUE)
lints[[counter]] <- int
val_int <- val_int+apply(sdata[,..posIntensities],2,sum,na.rm=TRUE)
counter <- counter+1
}
###We rebuild the whole vector
num_detect <- unlist(ldetect)
val_int_var <- unlist(lints)
##We read the data matrix by batch
vdetect <- num_detect >= FILTER_MIN_DETECTIONS
###We only keep the fitting ammount of features.
while (sum(vdetect) > 200000) {
FILTER_MIN_DETECTIONS <- FILTER_MIN_DETECTIONS + 1
vdetect <- num_detect >= FILTER_MIN_DETECTIONS
}
rm(sdata)
###Reading the raw files
dbb <- dbConnect(RSQLite:::SQLite(), PATH_DB)
raw_files <- dbGetQuery(dbb, "SELECT path FROM samples INNER JOIN processing on samples.id=processing.sample WHERE level='MS1' AND output_ms!='NOT PROCESSED' AND valid=1")[, 1]
dbDisconnect(dbb)
if (DEBUG) {
raw_files <- sapply(raw_files,str_replace,"/input/",DEBUG_INPUT)
}
####Selecting the msot intense files
sel_files <-
order(val_int, decreasing = TRUE)[1:min(FILES_USED, length(val_int))]
raw_files <- raw_files[sel_files]
###Setting up the parallel processing
bpp <- NULL
if (get_os() == "win") {
bpp <- SnowParam(workers = NUM_CORES,progressbar=TRUE,stop.on.error=FALSE)
} else{
bpp <- MulticoreParam(workers = min(NUM_CORES, 10),progressbar=TRUE,stop.on.error=FALSE)
}
opened_raw_files <- sapply(raw_files,readMSData, mode = "onDisk")
fadd <- file(PATH_ADDUCTS, "r")
adducts <- readLines(fadd)
close(fadd)
###
fadd <- file(PATH_MAIN_ADDUCTS, "r")
fadd
main_adducts <- readLines(fadd)
main_adducts <- main_adducts[sapply(main_adducts,startsWith,prefix="[M")]
fadd <- file(PATH_ADDUCTS, "r")
adducts <- readLines(fadd)
close(fadd)
###
fadd <- file(PATH_MAIN_ADDUCTS, "r")
main_adducts <- readLines(fadd)
main_adducts <- main_adducts[sapply(main_adducts,startsWith,prefix="[M")]
###The double molecule are removed
close(fadd)
####We map the sample name of the vector data
base_sample <-
str_split(basename(raw_files),
pattern = fixed("\\."),
simplify = TRUE)[, 1]
##Give the posaition of raw_file on the data matrix
match_files <- posIntensities
kcnames <- c("mz", "rt","mz_min","mz_max","rt_min","rt_max","peakwidth_mean",cnames[posIntensities[sel_files]])
dm <- fread(PATH_DATAMATRIX, header = TRUE, sep = "\t", select = kcnames)
dm <- dm[vdetect, , drop = FALSE]
val_int_var <- val_int_var[vdetect]
###If the software is crashing we divied the number of feature by 2 eventually
annot <-
groupFeatures(
dm,
val_int_var,
raw_files,
opened_raw_files,
match_files,
adducts,
main_adducts,
ionization_mode = POLARITY,
ppm = PPM,
dmz = DMZ,
size_batch = NUM_CORES,
cut_size = NUM_BY_BATCH,
cosFilter = 0.6,
ref_xcms = PATH_MODEL,
path_matching = PATH_MATCHING,
bbp = bpp
)
###Reread the full data frame
rm(dm)
dm <- fread(PATH_DATAMATRIX, header = TRUE, sep = "\t")
###If the file already exists at this step we erase it
if(file.exists(PATH_OUTPUT_SIMPLE)) file.remove(PATH_OUTPUT_SIMPLE)
dm_simplified <- buildDataMatrixSimplified(dm, annot, PATH_OUTPUT_SIMPLE)
if(file.exists(PATH_OUTPUT_FULL)) file.remove(PATH_OUTPUT_FULL)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
bpp
bpp = NULL
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
ledges <-
mapply( # bptry({ bpmapply
seq_cut[i]:(seq_cut[i + 1] - 1),
as.list(raw_files[seq_cut[i]:(seq_cut[i + 1] - 1)]),
as.list(opened_raw_files[seq_cut[i]:(seq_cut[i + 1] - 1)]),
FUN = computeNetworkRawfile,
MoreArgs = list(
ref_xcms = ref_xcms,
dm = dm,
cosFilter = cosFilter
),BPPARAM = bpp)
ledges <-
mapply( # bptry({ bpmapply
seq_cut[i]:(seq_cut[i + 1] - 1),
as.list(raw_files[seq_cut[i]:(seq_cut[i + 1] - 1)]),
as.list(opened_raw_files[seq_cut[i]:(seq_cut[i + 1] - 1)]),
FUN = computeNetworkRawfile,
MoreArgs = list(
ref_xcms = ref_xcms,
dm = dm,
cosFilter = cosFilter
))
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
ledges <-
mapply( # bptry({ bpmapply
seq_cut[i]:(seq_cut[i + 1] - 1),
as.list(raw_files[seq_cut[i]:(seq_cut[i + 1] - 1)]),
as.list(opened_raw_files[seq_cut[i]:(seq_cut[i + 1] - 1)]),
FUN = computeNetworkRawfile,
MoreArgs = list(
ref_xcms = ref_xcms,
dm = dm,
cosFilter = cosFilter
))
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
alle
netlist
mzdata
dm
alle
netlist
ldata
mzdata
sel
sel_idx
anbclique
anclique
anclique@peaklist
vid
vdata = anclique@peaklist[vid,]
vdata
alle
alle
alle[,1]
vadata[alle[,1],'rt_min']
vdata[alle[,1],'rt_min']
vdata
vdata[alle[,1],'rtmin']
alle[,1]
vdata[c(1,1,2,2),'rtmin']
vdata[alle[,1],'rtmin']
vdata = anclique@peaklist[sel[vid],]
vdata[alle[,1],'rtmin']
vdata[alle[,1]]
vdata[alle[,1],]
vdata[alle$from,]
vdata[alle$from,'rt']
vdata[as.matrix(alle$from),'rt']
as.matrix(alle$from)
vdata[list(alle$from),'rt']
list(alle$from)
alle$from
vdata[list(alle$from),]
vdata[alle$from,]
vdata[alle$from,'rt']
alle$from
anclique@peaklist[sel, 'rt']
vid
sel[vid]
max(id)
max(vid)
max(sel)
vdata
vdata[alle$from,'rt']
vdata[,'rt']
vdata[vid[alle$from],'rt']
vid[alle$from]
alle$from
alle$from
vdata = anclique@peaklist
vdata[alle$from,'rt']
vdata = anclique@peaklist[sel,]
vdata[alle$from,'rt']
vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin']
vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin']
[vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin']]
vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin']
vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax']
min(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax'])
bind(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax')
bind(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax'])
bind(list(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin']),list(vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax'])
)
rbind(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax'])
abs(rbind(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax']))
min(abs(rbind(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax'])))
apply(abs(rbind(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax'])),2,min)
rtdiff = apply(abs(rbind(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax'])),2,min)
alle <- as.matrix(alle)
rtdiff > 5
alle[rtdiff<5,]
alle[,4] = rtdiff
alle[,4] = as.mtraix(rtdiff)
alle <- as_data_frame(netlist, "edges")
vid <- vertex_attr(netlist, name = "id")
vdata = anclique@peaklist[sel,]
alle$rtdiff = apply(abs(rbind(vdata[alle$from,'rtmax']-vdata[alle$to,'rtmin'],vdata[alle$from,'rtmin']-vdata[alle$to,'rtmax'])),2,min)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
ledges
suppressWarnings(suppressMessages(library(Rcpp, warn.conflicts = FALSE)))
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=FALSE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
eicmat <- cliqueMS:::defineEIC(mzdata)
mzdata
eicmat <- suppressWarnings(cliqueMS:::defineEIC(mzdata))
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
##We compute the network for the selected files.
ledges <-
bpmapply(
seq_cut[i]:(seq_cut[i + 1] - 1),
as.list(raw_files[seq_cut[i]:(seq_cut[i + 1] - 1)]),
as.list(opened_raw_files[seq_cut[i]:(seq_cut[i + 1] - 1)]),
FUN = computeNetworkRawfile,
MoreArgs = list(
ref_xcms = ref_xcms,
dm = dm,
cosFilter = cosFilter
),BPPARAM = bpp)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/annotating_mixed_method.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
spectraVariables(sps)
fls
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
fls <- "D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42.mgf"
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
## @param maxMz the maximum m/z value to extract
## @param minRt the minimum retention time to extract
## @param maxRt the maximum retention time to extract
## @param minIntensity the minimum intensity to extract
## @param maxIntensity the maximum intensity to extract
## @param centroided whether the spectra should be centroided
## @param verbose whether to print progress information
## @param ... additional arguments passed to the `writeMSData` function
## @return `NULL`
## @export
extractSpectraFromMGF <- function(mgfFile, mzMLFile, msLevel = 2L,
minMz = 0, maxMz = Inf,
minRt = 0, maxRt = Inf,
minIntensity = 0, maxIntensity = Inf,
centroided = TRUE, verbose = TRUE) {
sps <- Spectra(mgfFile, source = MsBackendMgf())
sps <- sps[msLevel(sps) == msLevel]
sps <- sps[minMz(sps) >= minMz & maxMz(sps) <= maxMz]
sps <- sps[minRt(sps) >= minRt & maxRt(sps) <= maxRt]
sps <- sps[minIntensity(sps) >= minIntensity & maxIntensity(sps) <= maxIntensity]
if (centroided)
sps <- centroided(sps)
writeMSData(sps, mzMLFile, verbose = verbose, ...)
}
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
sps <- Spectra(fls, source = MsBackendMgf())
sps
sps <- Spectra(fls, source = MsBackendMgf())
sps <- Spectra(fls, source = MsBackendMgf())
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/export_iso_to_mgf.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
nrow([])
spec = [[1 2],[2 0]]
spec = [1 2,2 0]
spec = matrix(c(1,2,2,0))
spec = matrix(c(1,2,2,0), nrow = 2)
spec
spec[spec[,2]>1,]
spec[spec[,2]>3,]
nrow(spec[spec[,2]>3,])
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/export_iso_to_mgf.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/export_iso_to_mgf.R", echo=TRUE)
spec
nrow(spec)
spec <- iso_spectra[[i]]
spec <- spec[spec[,2]>=1,]
spec
nrow(spec)
len(nrow)
matrix(spec, ncol=2)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/export_iso_to_mgf.R", echo=TRUE)
debugSource("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/export_iso_to_mgf.R", echo=TRUE)
spec
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/export_iso_to_mgf.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
sps <- readMgfData(fls, pdata = NULL, centroided = TRUE, smoothed = FALSE,
verbose = isMSnbaseVerbose(), cache = 1)
msLevel(sps)
sps[msLevel(sps)==2]
sps <- sps[msLevel(sps)==2]
test <- readMSData("D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42.mzML")
test <- readMSData("D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42.mzML")
test <- readMS2Data("D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42.mzML")
test <- MSnbase::readMSData("D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42.mzML")
sps[0]
sps@featureData[0]
sps@featureData@data
sps@featureData@data['id']
sps@featureData@data['id']=1:nrow(sps@featureData@data)
writeMSData(sps,
"D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42.mzML",
outformat = 'mzml',
verbose = verbose)
writeMSData(sps,
"D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42.mzML",
outformat = 'mzml')
writeMSData(sps,
"D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42.mzML")
writeMSData(sps,
"D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42a.mzML")
writeMSData(sps, "D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42a.mzML")
sps@featureData@varMetadata
sps@featureData@varMetadata['ID']
sps@featureData@varMetadata
sps@featureData@varMetadata.SCANS
sps@featureData@varMetadata <- rbind(sps@featureData@varMetadata, 'ID' = NA)
sps@featureData@varMetadata
writeMSData(sps, "D:/Data/ZenoTOF2/LipidMix_EAD15_slaw/spectra_fd98f806e1890eff405ad8025b825a42a.mzML")
test <- MSnbase::readMSData("D:/Data/ZenoTOF2/LipidMix_EAD15/EAD_30msec15KE_LipidMix1x_2.mzML")
test@featureData
test@featureData@dimLabels
test@featureData@varMetadata
test@featureData@data
mslevel[test
]
msLevel[test]
msLevel(test)
test@featureData
test@assayData
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
sps[1]
msLevel(sps)==2
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
sps <- readMgfData("D:/Data/wiff_test_slaw/spectra_d545608d654dcd5ede37d38fa87dc86d.mgf", pdata = NULL, centroided = TRUE, smoothed = FALSE,
verbose = isMSnbaseVerbose(), cache = 1)
warnings/()
warnings()
sps[1]
acquisitionNum(sps)
str(sps)
scanIndex(sps[0])
scanIndex(sps)
sps@phenoData
sps@assayData
sps@assayData
sps@assayData
str(sps@assayData)
acquisitionNum(sps)
acquisitionNum(sps) = 1:5600
acquisitionNum(sps)
get(sps,'acquisitionNum')
get(sps)
sps(1)
sps
extractSpectraData(sps)
sps[[1]]
sps[[1]]@acquisitionNum
sps[[1]]@acquisitionNum = 1
sp <- sps[[1]]
sp
sp@acquisitionNum
sp@acquisitionNum[[¦]]
sp@acquisitionNum[[1]]
sp@acquisitionNum = 1
s = spectrum1()
s <- Spectrum1()
s <- MSnbase::Spectrum1()
s <- MSnbase::spectrum()
sps$intensity
sps$featureData
sps@featureData
sps@featureData
sps@featureData@data
str(sps)
sps@featureData@data
sps@assayData@
a
sps@assayData
sps@assayData()
sps[[1]]
sps[[1]] = sps[[@]]
sps[[1]] = sps[[2]]
acquisitionNum(sps[[1]])
acquisitionNum(sps[[1]],1)
acquisitionNum(sps[[1]],1L)
acquisitionNum(sps[[1]])
BiocManager::install("lgatto/MSnbase", ref = "issue259")
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/extractingMZMLfromMGF.R", echo=TRUE)
BiocManager::install("lgatto/MSnbase", ref = "issue259")
detach("package:MSnbase", unload = TRUE)
BiocManager::install("lgatto/MSnbase", ref = "issue259")
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/gap_filling_refactored.R", echo=TRUE)
source("D:/SW/SLAW_temp/pylcmsprocessing/Rscript/gap_filling_refactored.R", echo=TRUE)
RUN R -e "setwd('/onlineLCMSaligner');library(devtools);remove.packages('onlineLCMSaligner');install_local('/onlineLCMSaligner')"
setwd('/onlineLCMSaligner');library(devtools);remove.packages('onlineLCMSaligner');install_local('/onlineLCMSaligner')
setwd('./onlineLCMSaligner');library(devtools);remove.packages('onlineLCMSaligner');install_local('/onlineLCMSaligner')
setwd("D:/SW/SLAW_temp/onlineLCMSaligner")
library(devtools);remove.packages('onlineLCMSaligner');install_local('/onlineLCMSaligner')
install_local('../onlineLCMSaligner')
